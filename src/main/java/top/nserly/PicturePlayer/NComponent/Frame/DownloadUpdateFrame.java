package top.nserly.PicturePlayer.NComponent.Frame;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import top.nserly.GUIStarter;
import top.nserly.PicturePlayer.Loading.Bundle;
import top.nserly.PicturePlayer.Utils.Window.WindowLocation;
import top.nserly.PicturePlayer.Version.DownloadChecker.AdvancedDownloadSpeed;
import top.nserly.PicturePlayer.Version.DownloadChecker.CheckAndDownloadUpdate;
import top.nserly.SoftwareCollections_API.String.StringFormation;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.lang.reflect.Method;
import java.util.Locale;
import java.util.ResourceBundle;

public class DownloadUpdateFrame extends JFrame {
    private JLabel Title;
    private JLabel DownloadTotalProgress;
    private JProgressBar TotalProgress;
    private JLabel CurrentDownloadProgress;
    private JProgressBar CurrentProgress;
    private JPanel Main;
    private JLabel SpeedLabel;
    private JLabel DownloadCounting;
    private final CheckAndDownloadUpdate downloadUpdate;
    public static DownloadUpdateFrame downloadUpdateFrame;


    public DownloadUpdateFrame(CheckAndDownloadUpdate update) {
        downloadUpdateFrame = this;
        setContentPane(Main);
        StringFormation formation = new StringFormation(Title.getText());
        formation.add("top/nserly/PicturePlayer/Version", update.NewVersionName);
        formation.add("VersionID", String.valueOf(update.NewVersionID));
        Title.setText(formation.getProcessingString());
        downloadUpdate = update;
        DownloadCounting.setText(DownloadCounting.getText() + "\n{current}/{total}");
        pack();
        setSize(getWidth(), 200);
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        DownloadUpdateFrame downloadUpdateFrame = this;
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                int choose = JOptionPane.showConfirmDialog(downloadUpdateFrame, Bundle.getMessage("CancelUpdate_Content"), Bundle.getMessage("CancelUpdate_Title"), JOptionPane.ERROR_MESSAGE);
                if (choose == JOptionPane.OK_OPTION) {
                    downloadUpdate.stopToUpdate();
                    GUIStarter.main.setVisible(true);
                    downloadUpdateFrame.dispose();
                }
            }

            @Override
            public void windowActivated(WindowEvent e) {
                //当前窗体成为活动窗体时,让窗体获取焦点
                requestFocus();
            }
        });
    }

    public void setVisible(boolean b) {
        if (b && !isVisible()) {
            AdvancedDownloadSpeed advancedDownloadSpeed = new AdvancedDownloadSpeed(downloadUpdate, TotalProgress, CurrentProgress, SpeedLabel, DownloadCounting);
            Point location = WindowLocation.ComponentCenter(GUIStarter.main, getWidth(), getHeight());
            setLocation(location);
        }
        GUIStarter.main.setVisible(!b);
        super.setVisible(b);
    }

    public void dispose() {
        super.dispose();
        GUIStarter.main.setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        Main = new JPanel();
        Main.setLayout(new GridLayoutManager(5, 3, new Insets(0, 0, 0, 0), -1, -1));
        Title = new JLabel();
        Font TitleFont = this.$$$getFont$$$(null, -1, 18, Title.getFont());
        if (TitleFont != null) Title.setFont(TitleFont);
        this.$$$loadLabelText$$$(Title, this.$$$getMessageFromBundle$$$("messages", "Updating_Title"));
        Main.add(Title, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        Main.add(panel1, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        DownloadTotalProgress = new JLabel();
        this.$$$loadLabelText$$$(DownloadTotalProgress, this.$$$getMessageFromBundle$$$("messages", "DownloadTotalProgress"));
        panel1.add(DownloadTotalProgress, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        TotalProgress = new JProgressBar();
        panel1.add(TotalProgress, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        Main.add(panel2, new GridConstraints(4, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        SpeedLabel = new JLabel();
        SpeedLabel.setText("");
        panel2.add(SpeedLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        CurrentDownloadProgress = new JLabel();
        this.$$$loadLabelText$$$(CurrentDownloadProgress, this.$$$getMessageFromBundle$$$("messages", "CurrentDownloadProgress"));
        Main.add(CurrentDownloadProgress, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        CurrentProgress = new JProgressBar();
        Main.add(CurrentProgress, new GridConstraints(3, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(463, 4), null, 0, false));
        DownloadCounting = new JLabel();
        DownloadCounting.setHorizontalAlignment(2);
        this.$$$loadLabelText$$$(DownloadCounting, this.$$$getMessageFromBundle$$$("messages", "DownloadCounting"));
        Main.add(DownloadCounting, new GridConstraints(2, 0, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(463, 17), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    private static Method $$$cachedGetBundleMethod$$$ = null;

    private String $$$getMessageFromBundle$$$(String path, String key) {
        ResourceBundle bundle;
        try {
            Class<?> thisClass = this.getClass();
            if ($$$cachedGetBundleMethod$$$ == null) {
                Class<?> dynamicBundleClass = thisClass.getClassLoader().loadClass("com.intellij.DynamicBundle");
                $$$cachedGetBundleMethod$$$ = dynamicBundleClass.getMethod("getBundle", String.class, Class.class);
            }
            bundle = (ResourceBundle) $$$cachedGetBundleMethod$$$.invoke(null, path, thisClass);
        } catch (Exception e) {
            bundle = ResourceBundle.getBundle(path);
        }
        return bundle.getString(key);
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadLabelText$$$(JLabel component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setDisplayedMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return Main;
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }
}
